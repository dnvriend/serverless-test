service:
  name: person-repository

plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: eu-central-1
  memorySize: 128 # Overwrite the default memory size. Default is 1024
  timeout: 30 # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  environment:
    SLS_STAGE: ${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Resource:
        Fn::GetAtt:
          - PersonsTable
          - Arn      
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Scan
        - dynamodb:DeleteItem
        - dynamodb:Query
    - Effect: Allow
      Resource:
        Fn::GetAtt:
          - PersonsDistinctTable
          - Arn
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Scan
        - dynamodb:DeleteItem
        - dynamodb:Query
    - Effect: Allow
      Resource:
        Fn::GetAtt:
          - PersonsTable
          - StreamArn
      Action:
        - dynamodb:GetRecords
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
    - Effect: Allow
      Resource:
        Fn::GetAtt:
          - PersonCreatedStream
          - Arn
      Action:
        - kinesis:*

functions:
  hello:
    handler: src/handler/hello/HelloHandler.get
    events:
      - http:
          method: any
          path: /hello
  list-persons:
        handler: src/handler/person/PersonHandler.list
        events:
          - http:
              method: get
              path: /person
  post-person:
        handler: src/handler/person/PersonHandler.post
        events:
          - http:
              method: post
              path: /person
  get-person:
    handler: src/handler/person/PersonHandler.get
    events:
      - http:
          method: get
          path: /person/{id}
  update-person:
    handler: src/handler/person/PersonHandler.patch
    events:
      - http:
          method: patch
          path: /person/{id}
  delete-person:
    handler: src/handler/person/PersonHandler.remove
    events:
      - http:
          method: delete
          path: /person/{id}
  lp-distinct:
    handler: src/handler/person/PersonDistinctHandler.list
    events:
      - http:
          method: get
          path: /distinct
  ip-distinct:
    handler: src/handler/person/PersonDistinctHandler.handle
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - PersonsTable
              - StreamArn
          batchSize: 100
          startingPosition: LATEST
          enabled: True
  personcreated-handler:
    handler: src/handler/person/PersonCreatedHandler.handle
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
              - PersonCreatedStream
              - Arn
          batchSize: 100
          startingPosition: TRIM_HORIZON # LATEST | TRIM_HORIZON
          enabled: True

#####
## Notice!
##
## - For DynamoDB you only need to provide the attributes that will
##   become the key or keys! DynamoDB is schemaless, so when inserting or
##   updating, DynamoDB is only interested in the keys. No need to write out
##   a schema, as DynamoDB is schemaless
resources:
  Resources:
    PersonsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${opt:stage, self:provider.stage}-persons-table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        StreamSpecification:
          StreamViewType: "NEW_IMAGE" # Valid Values: NEW_IMAGE | OLD_IMAGE | NEW_AND_OLD_IMAGES | KEYS_ONLY
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
    PersonsDistinctTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${opt:stage, self:provider.stage}-persons-distinct-table
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    PersonCreatedStream:
      Type: "AWS::Kinesis::Stream"
      Properties:
        Name: PersonCreatedStream
        RetentionPeriodHours: 24
        ShardCount: 3
  Outputs:
    PersonsTableArn:
      Description: "The ARN for the dynamodb persons table"
      Value:
        "Fn::GetAtt": [PersonsTable, Arn]
      Export:
        Name: personsTableArn
    PersonsTableStreamArn:
      Description: "The ARN for the dynamodb persons table stream"
      Value:
        "Fn::GetAtt": [PersonsTable, StreamArn]
      Export:
        Name: personsTableStreamArn
    PersonsDistinctTableArn:
      Description: "The ARN for the dynamodb persons distinct table"
      Value:
        "Fn::GetAtt": [PersonsDistinctTable, Arn]
      Export:
        Name: personsDistinctTableArn

